{"version":3,"sources":["components/Topbar.tsx","Constant.tsx","components/Blog.tsx","components/Timeline.tsx","components/Home.tsx","components/Project.tsx","App.tsx","serviceWorker.tsx","index.tsx"],"names":["Topbar","className","Navbar","bg","variant","expand","Brand","style","marginLeft","href","Toggle","aria-controls","Collapse","id","Nav","marginRight","Link","as","to","React","Component","blogCoverEntry","Blog","document","title","blogCount","length","blogCountRows","Math","ceil","textAlign","Array","from","keys","map","index","key","timelineData","date","desc","org","loc","Timeline","animateFromTo","elem","direction","offset","x","y","classList","contains","gsap","fromTo","autoAlpha","duration","ease","overwrite","hide","set","animateDirection","registerPlugin","ScrollTrigger","utils","toArray","forEach","create","trigger","onEnter","data","clear","Home","Project","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+UA2CeA,E,uKAjCb,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aACb,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,MACtC,kBAACH,EAAA,EAAOI,MAAR,CAAcC,MAAO,CAACC,WAAY,QAASC,KAAK,KAAhD,YACA,kBAACP,EAAA,EAAOQ,OAAR,CAAeC,gBAAc,qBAC7B,kBAACT,EAAA,EAAOU,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKP,MAAO,CAACQ,YAAa,QAASd,UAAU,WAC7C,kBAACa,EAAA,EAAIE,KAAL,CAAUC,GAAID,IAAME,GAAG,KAAvB,QACA,kBAACJ,EAAA,EAAIE,KAAL,CAAUC,GAAID,IAAME,GAAG,SAAvB,QACA,kBAACJ,EAAA,EAAIE,KAAL,CAAUC,GAAID,IAAME,GAAG,YAAvB,WACA,kBAACJ,EAAA,EAAIE,KAAL,CAAUP,KCrBG,+BDqBb,aAeJ,mC,GA5BaU,IAAMC,WEMrBC,EAAkC,GAsDzBC,E,kLAhDXC,SAASC,MAAQ,oB,+BAIjB,IAAIC,EAAYJ,EAAeK,OAC3BC,EAAgBC,KAAKC,KAAKR,EAAeK,OAAO,GAEpD,OAAkB,IAAdD,EAEA,6BACE,kBAAC,EAAD,MACA,mDAGA,6BACA,yBAAKlB,MAAO,CAACuB,UAAW,WAAxB,yCAQJ,6BACE,kBAAC,EAAD,MACA,mDAGA,6BACCC,MAAMC,KAAKD,MAAMJ,GAAeM,QAAQC,KAAI,SAACC,GAC5C,OACE,yBAAKlC,UAAU,aACb,yBAAKA,UAAU,aACZoB,EAAqB,EAANc,GAASC,KAEpB,EAAND,EAAQ,EAAIV,GACb,yBAAKxB,UAAU,aACZoB,EAAqB,EAANc,EAAQ,GAAGC,c,GAvCxBjB,IAAMC,W,wBCAnBiB,EAAoC,CACtC,CACIb,MAAO,oBACPc,KAAM,mBACNC,KAAM,kBACNC,IAAK,SACLC,IAAK,mBACLhC,KAAM,yBAEV,CACIe,MAAO,oBACPc,KAAM,kBACNC,KAAM,wCACNC,IAAK,UACLC,IAAK,mBACLhC,KAAM,oBAEV,CACIe,MAAO,0BACPc,KAAM,mBACNC,KAAM,GACNC,IAAK,yBACLC,IAAK,mBACLhC,KAAM,yBAEV,CACIe,MAAO,iBACPc,KAAM,kBACNC,KAAM,GACNC,IAAK,yBACLC,IAAK,mBACLhC,KAAM,yBAEV,CACIe,MAAO,uCACPc,KAAM,kBACNC,KAAM,GACNC,IAAK,mBACLC,IAAK,qBA2FEC,E,4MArFXC,cAAgB,SAACC,GAAuC,IAA5BC,EAA2B,wDAAN,EACvCC,EAAS,IACXC,EAAI,EACJC,EAAIH,EAAYC,EAEpBD,GAAwB,EAEpBD,EAAKK,UAAUC,SAAS,oBACxBH,GAAKD,EACLE,EAAI,GACGJ,EAAKK,UAAUC,SAAS,sBAC/BH,EAAID,EACJE,EAAI,GAGRG,IAAKC,OACDR,EACA,CAAEG,EAAGA,EAAGC,EAAGA,EAAGK,UAAW,GACzB,CACIC,SAAU,KACVP,EAAG,EACHC,EAAG,EACHK,UAAW,EACXE,KAAM,OACNC,UAAW,U,EAKvBC,KAAO,SAACb,GACJO,IAAKO,IAAId,EAAM,CAAES,UAAW,K,EAwBhCM,iBAAmB,SAACxB,GAChB,MAAM,WAAN,OAAkBA,EAAQ,IAAM,EAAI,kBAAoB,qB,kEAtBvC,IAAD,OAChBgB,IAAKS,eAAeC,KAEpBV,IAAKW,MAAMC,QAAQ,YAAYC,SAAQ,SAACpB,GACpC,EAAKa,KAAKb,GAEViB,IAAcI,OAAO,CACjBC,QAAStB,EACTuB,QAAS,WACL,EAAKxB,cAAcC,W,+BAgBzB,IAAD,OACL,OACI,yBAAK3C,UAAU,YACX,4BACKoC,EAAaH,KAAI,SAACkC,EAAMjC,GACrB,OACI,wBAAIC,IAAKD,GACL,yBAAKlC,UAAS,kBAAa,EAAK0D,iBAAiBxB,KAC7C,4BAAKiC,EAAK5C,OACV,2BAAI4C,EAAK7B,MACT,6BACA,2BAAG,uBAAG9B,KAAM2D,EAAK3D,MAAO2D,EAAK5B,MAC7B,2BAAI4B,EAAK3B,MAEb,yBAAKxC,UAAS,eAAU,EAAK0D,iBAAuB,EAANxB,KAC1C,4BAAKiC,EAAK9B,WAK1B,yBAAK/B,MAAO,CAAC8D,MAAO,gB,GAhFjBlD,IAAMC,WC/BdkD,E,kLAtBX/C,SAASC,MAAQ,oB,+BAIjB,OACE,6BACE,kBAAC,EAAD,MACA,6BACE,mDAGA,6BACA,uBAAGjB,MAAO,CAACuB,UAAW,WAAtB,6EAGA,kBAAC,EAAD,Y,GAjBSX,IAAMC,WCkBVmD,E,kLAjBXhD,SAASC,MAAQ,uB,+BAIjB,OACE,6BACE,kBAAC,EAAD,MACA,uDAGA,6BACA,uBAAGjB,MAAO,CAACuB,UAAW,WAAtB,gE,GAbcX,IAAMC,WCsBboD,E,uKAlBX,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,YACV,kBAAC,EAAD,a,GAZMvD,IAAMC,WCMJuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJ3D,SAAS4D,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b30166be.chunk.js","sourcesContent":["import React from \"react\";\n\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\n\nimport * as Constant from \"../Constant\";\nimport { Link } from \"react-router-dom\";\n\nclass Topbar extends React.Component {\n render() {\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-12\">\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\"> \n          <Navbar.Brand style={{marginLeft: \"24px\"}} href=\"/\">Kytabyte</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav style={{marginRight: \"20px\"}} className=\"ml-auto\">\n            <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\n            <Nav.Link as={Link} to=\"/blog\">Blog</Nav.Link>\n            <Nav.Link as={Link} to=\"/project\">Project</Nav.Link>\n            <Nav.Link href={Constant.GithubUrl}>GitHub</Nav.Link>\n            {/* <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n            </NavDropdown> */}\n            </Nav>\n            {/* <Form inline>\n            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n            <Button variant=\"outline-success\">Search</Button>\n            </Form> */}\n          </Navbar.Collapse>\n        </Navbar>\n        <br />\n      </div>\n    </div>\n  );\n }\n}\n\nexport default Topbar;","export const GithubUrl = \"https://github.com/Kytabyte\";","import React from \"react\";\n\nimport \"../styles/Blog.css\";\nimport Topbar from \"./Topbar\";\n\n\ntype BlogCoverType = {\n  key: string;\n  title: string;\n  date: Date;\n  desc?: string;\n  image?: string;\n}\n\nconst blogCoverEntry: BlogCoverType[] = [\n  \n]\n\nclass Blog extends React.Component<object, object> {\n  componentDidMount() {\n    document.title = \"Kytabyte's Blog\";\n  }\n\n  render() {\n    let blogCount = blogCoverEntry.length;\n    let blogCountRows = Math.ceil(blogCoverEntry.length/2);\n\n    if (blogCount === 0) {\n      return (\n        <div>\n          <Topbar />\n          <h1>\n              Welcome to my blog!\n          </h1>\n          <br />\n          <div style={{textAlign: \"center\"}}>\n            Sorry, I do not have any blog yet...\n          </div>\n        </div>\n      )\n    }\n\n    return (\n      <div>\n        <Topbar />\n        <h1>\n            Welcome to my blog!\n        </h1>\n        <br />\n        {Array.from(Array(blogCountRows).keys()).map((index) => {\n          return (\n            <div className=\"entry-row\">\n              <div className=\"entry-col\">\n                {blogCoverEntry[index*2].key}\n              </div>\n              {index*2+1 < blogCount &&\n              <div className=\"entry-col\">\n                {blogCoverEntry[index*2+1].key}\n              </div>\n              }\n            </div>\n          )\n        })}\n      </div>\n   );\n  }\n}\n\nexport default Blog;","import React from \"react\";\n\nimport \"../styles/Timeline.css\"\n\nimport { gsap } from \"gsap\";\nimport { ScrollTrigger } from \"gsap/ScrollTrigger\";\n\n\ntype TimelineEntryType = {\n    title: string;\n    date: string;\n    desc: string;\n    org: string;\n    loc: string;\n    href?: string;\n};\n\n\nconst timelineData: TimelineEntryType[] = [\n    {\n        title: \"Software Engineer\",\n        date: \"2021.7 - Present\",\n        desc: \"Chatbot for Web\",\n        org: \"Google\",\n        loc: \"Waterloo, ON, CA\",\n        href: \"https://about.google/\"\n    },\n    {\n        title: \"Software Engineer\",\n        date: \"2019.6 - 2021.6\",\n        desc: \"Chatbot and NLP-related task platform\",\n        org: \"RSVP.ai\",\n        loc: \"Waterloo, ON, CA\",\n        href: \"https://rsvp.ai/\"\n    },\n    {\n        title: \"MMath, Computer Science\",\n        date: \"2016.9 - 2018.12\",\n        desc: \"\",\n        org: \"University of Waterloo\",\n        loc: \"Waterloo, ON, CA\",\n        href: \"https://uwaterloo.ca/\"\n    },\n    {\n        title: \"BSc, Geomatics\",\n        date: \"2014.9 - 2016.6\",\n        desc: \"\",\n        org: \"University of Waterloo\",\n        loc: \"Waterloo, ON, CA\",\n        href: \"https://uwaterloo.ca/\"\n    },\n    {\n        title: \"BSc, Geographical Information System\",\n        date: \"2012.9 - 2014.6\",\n        desc: \"\",\n        org: \"Wuhan University\",\n        loc: \"Wuhan, Hubei, CN\"\n    }\n];\n\nclass Timeline extends React.Component<Object, Object> {\n\n    animateFromTo = (elem: any, direction: number = -1) => {\n        const offset = 1000;\n        let x = 0;\n        let y = direction * offset;\n        \n        direction = direction | 1;\n        \n        if (elem.classList.contains(\"slide_from_left\")) {\n            x = -offset;\n            y = 0;\n        } else if (elem.classList.contains(\"slide_from_right\")) {\n            x = offset;\n            y = 0;\n        }\n        \n        gsap.fromTo(\n            elem,\n            { x: x, y: y, autoAlpha: 0 },\n            {\n                duration: 1.25,\n                x: 0,\n                y: 0,\n                autoAlpha: 1,\n                ease: \"expo\",\n                overwrite: \"auto\",\n            }\n        );\n    };\n\n    hide = (elem: any) => {\n        gsap.set(elem, { autoAlpha: 0 });\n    };\n\n    componentDidMount() {\n        gsap.registerPlugin(ScrollTrigger);\n\n        gsap.utils.toArray(\".animate\").forEach((elem: any) => {\n            this.hide(elem);\n\n            ScrollTrigger.create({\n                trigger: elem,\n                onEnter: () => {\n                    this.animateFromTo(elem);\n                },\n                // onEnterBack: () => {\n                //     this.animateFromTo(elem, -1);\n                // },\n                // onLeave: () => {\n                //     this.hide(elem);\n                // },\n            });\n        });\n    }\n\n    animateDirection = (index: number) => {\n        return `animate ${index % 2 === 0 ? \"slide_from_left\" : \"slide_from_right\"}`\n    }\n\n    render() {\n        return (\n            <div className=\"timeline\">\n                <ul>\n                    {timelineData.map((data, index) => {\n                        return (\n                            <li key={index}>\n                                <div className={`content ${this.animateDirection(index)}`}>\n                                    <h3>{data.title}</h3>\n                                    <p>{data.desc}</p>\n                                    <hr />\n                                    <p><a href={data.href}>{data.org}</a></p>\n                                    <p>{data.loc}</p>\n                                </div>\n                                <div className={`time ${this.animateDirection(index^1)}`}>\n                                    <h4>{data.date}</h4>\n                                </div>\n                            </li>\n                        )\n                    })}\n                    <div style={{clear: \"both\"}}></div>\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default Timeline;","import React from \"react\";\n\nimport Topbar from \"./Topbar\";\nimport Timeline from \"./Timeline\"\n\nclass Home extends React.Component<object, object> {\n  componentDidMount() {\n    document.title = \"Kytabyte's Home\";\n  }\n\n  render() {\n    return (\n      <div>\n        <Topbar />\n        <div>\n          <h1>\n              Welcome to my page!\n          </h1>\n          <br />\n          <p style={{textAlign: \"center\"}}>\n            Hello, My name is Kyle Xie, I am currently a software engineer at Google.\n          </p>\n          <Timeline />\n        </div>\n      </div>\n   );\n  }\n}\n\nexport default Home;","import React from \"react\";\n\nimport Topbar from \"./Topbar\";\n\nclass Project extends React.Component<object, object> {\n  componentDidMount() {\n    document.title = \"Kytabyte's Project\";\n  }\n\n  render() {\n    return (\n      <div>\n        <Topbar />\n        <h1>\n            Welcome to my projects!\n        </h1>\n        <br />\n        <p style={{textAlign: \"center\"}}>Unfortunately, I haven't summary up any project here...</p>\n      </div>\n   );\n  }\n}\n\nexport default Project;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Blog from './components/Blog';\nimport Home from './components/Home'\nimport Project from './components/Project';\n\nclass App extends React.Component<object, object> {\n  render() {\n    return (\n      <>\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/blog\">\n            <Blog />\n          </Route>\n          <Route path=\"/project\">\n            <Project />\n          </Route>\n        </Switch>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl : string = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config: { onUpdate: (arg0: ServiceWorkerRegistration) => void; onSuccess: (arg0: ServiceWorkerRegistration) => void; }) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}