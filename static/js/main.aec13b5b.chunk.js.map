{"version":3,"sources":["components/Topbar.tsx","Constant.tsx","components/Blog.tsx","components/Home.tsx","components/Project.tsx","App.tsx","serviceWorker.tsx","index.tsx"],"names":["Topbar","className","Navbar","bg","variant","expand","sticky","Brand","style","marginLeft","href","Toggle","aria-controls","Collapse","id","Nav","marginRight","Link","React","Component","Blog","Container","Home","Project","App","document","title","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","process","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8RA0CeA,E,uKAjCb,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aACb,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,KAAKC,OAAO,OAClD,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,MAAO,CAACC,WAAY,QAASC,KAAK,KAAhD,YACA,kBAACR,EAAA,EAAOS,OAAR,CAAeC,gBAAc,qBAC7B,kBAACV,EAAA,EAAOW,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKP,MAAO,CAACQ,YAAa,QAASf,UAAU,WAC7C,kBAACc,EAAA,EAAIE,KAAL,CAAUP,KAAK,KAAf,QACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,WAAf,QACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,cAAf,WACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KCpBG,+BDoBb,aAeJ,mC,GA5BaQ,IAAMC,WEcZC,E,uKAdX,OACE,6BACE,kBAAC,EAAD,MACA,6BACE,kBAACC,EAAA,EAAD,CAAWpB,UAAU,6BACnB,yD,GAPOiB,IAAMC,WCgBVG,E,uKAdX,OACE,6BACE,kBAAC,EAAD,MACA,6BACE,kBAACD,EAAA,EAAD,CAAWpB,UAAU,6BACnB,yD,GAPOiB,IAAMC,WCgBVI,E,uKAdX,OACE,6BACE,kBAAC,EAAD,MACA,6BACE,kBAACF,EAAA,EAAD,CAAWpB,UAAU,6BACnB,6D,GAPUiB,IAAMC,WCyBbK,E,kLAtBXC,SAASC,MAAQ,oB,+BAIjB,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,YACV,kBAAC,EAAD,a,GAhBMV,IAAMC,WCMJU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAYC,SAAUC,IACpB,kBAAC,EAAD,QAGJb,SAASc,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aec13b5b.chunk.js","sourcesContent":["import React from \"react\";\n\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\n\nimport * as Constant from \"../Constant\";\n\nclass Topbar extends React.Component {\n render() {\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-12\">\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" sticky=\"top\">\n          <Navbar.Brand style={{marginLeft: \"20px\"}} href=\"/\">Kytabyte</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav style={{marginRight: \"20px\"}} className=\"ml-auto\">\n            <Nav.Link href=\"/\">Home</Nav.Link>\n            <Nav.Link href=\"/#/blog\">Blog</Nav.Link>\n            <Nav.Link href=\"/#/project\">Project</Nav.Link>\n            <Nav.Link href={Constant.GithubUrl}>GitHub</Nav.Link>\n            {/* <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n            </NavDropdown> */}\n            </Nav>\n            {/* <Form inline>\n            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n            <Button variant=\"outline-success\">Search</Button>\n            </Form> */}\n          </Navbar.Collapse>\n        </Navbar>\n        <br />\n      </div>\n    </div>\n  );\n }\n}\n\nexport default Topbar;","export const GithubUrl = \"https://github.com/Kytabyte\";","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\n\nimport Topbar from \"./Topbar\";\n\nclass Blog extends React.Component<object, object> {\n  render() {\n    return (\n      <div>\n        <Topbar />\n        <br />\n          <Container className=\"justify-content-md-center\">\n            <h1>\n                Welcome to my blog!\n            </h1>\n          </Container>\n      </div>\n   );\n  }\n}\n\nexport default Blog;","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\n\nimport Topbar from \"./Topbar\";\n\nclass Home extends React.Component<object, object> {\n  render() {\n    return (\n      <div>\n        <Topbar />\n        <br />\n          <Container className=\"justify-content-md-center\">\n            <h1>\n                Welcome to my page!\n            </h1>\n          </Container>\n      </div>\n   );\n  }\n}\n\nexport default Home;","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\n\nimport Topbar from \"./Topbar\";\n\nclass Project extends React.Component<object, object> {\n  render() {\n    return (\n      <div>\n        <Topbar />\n        <br />\n          <Container className=\"justify-content-md-center\">\n            <h1>\n                Welcome to my projects!\n            </h1>\n          </Container>\n      </div>\n   );\n  }\n}\n\nexport default Project;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Blog from './components/Blog';\nimport Home from './components/Home'\nimport Project from './components/Project';\n\nclass App extends React.Component<object, object> {\n  componentDidMount() {\n    document.title = \"Kytabyte's Home\";\n  }\n\n  render() {\n    return (\n      <>\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/blog\">\n            <Blog />\n          </Route>\n          <Route path=\"/project\">\n            <Project />\n          </Route>\n        </Switch>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl : string = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config: { onUpdate: (arg0: ServiceWorkerRegistration) => void; onSuccess: (arg0: ServiceWorkerRegistration) => void; }) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}